import numpy as np


class Utils:
    """Helper functions used for calculating the values of each LIC in CMV"""

    def calc_distance(self, x, y):
        """Calculates Euclidian distance between two planar data points"""
        return np.linalg.norm(x - y)

    def minimum_distance(self, x, y, length):
        """Calculates the distance and compares it with parameter length"""
        return length < Utils.calc_distance(self, x, y)

    def maximum_distance(self, x, y, length):
        """Calculates the distance and compares it with parameter length"""
        return length > Utils.calc_distance(self, x, y)

    def calc_circumradius(self, x, y, z):
        """Calculates circumradius of the circumcircle generated by three coordinates"""
        a = Utils.calc_distance(self, x, y)
        b = Utils.calc_distance(self, x, z)
        c = Utils.calc_distance(self, y, z)
        return (a * b * c) / (
            ((a + b + c)) * (b + c - a) * (c + a - b) * (a + b - c)
        ) ** (1 / 2)

    def calc_triangle_area(self, x, y, z):
        """Calculates the area of a triangle using cross product"""
        return 0.5 * np.abs(np.cross(x - y, x - z))

    def calc_angle(self, first, vertex, last):
        """Calculates the angle between three points (vertex middle point) and returns the angle in radians"""
        a = vertex - first
        b = vertex - last

        if a.all() == 0 or b.all() == 0:  # Undefined angle
            return

        return np.arccos(np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b)))

    def determine_quadrant(self, point, array):
        """Determines which quadrant contains a given data point"""
        x, y = point

        if x >= 0 and y >= 0:
            array[0] = True
            return
        if x < 0 and y >= 0:
            array[1] = True
            return
        if x < 0 and y < 0:
            array[2] = True
            return
        if x >= 0 and y < 0:
            array[3] = True
            return
